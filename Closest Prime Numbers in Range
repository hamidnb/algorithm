from typing import List

class Solution:
    def closestPrimes(self, left: int, right: int) -> List[int]:
        if right < 2:
            return [-1, -1]
        
        def sieve(n):
            if n < 2:
                return []
            sieve = [True] * (n + 1)
            sieve[0] = sieve[1] = False
            for i in range(2, int(n ** 0.5) + 1):
                if sieve[i]:
                    sieve[i*i : n+1 : i] = [False] * len(sieve[i*i : n+1 : i])
            return [i for i, is_prime in enumerate(sieve) if is_prime]
        
        sqrt_right = int(right ** 0.5)
        base_primes = sieve(sqrt_right)
        
        sieve_size = right - left + 1
        is_prime = [True] * sieve_size
        
        if left <= 0 <= right:
            zero_idx = 0 - left
            if zero_idx < sieve_size:
                is_prime[zero_idx] = False
        if left <= 1 <= right:
            one_idx = 1 - left
            if one_idx < sieve_size:
                is_prime[one_idx] = False
        
        for p in base_primes:
            start = max(p * ((left + p - 1) // p), p * p)
            for multiple in range(start, right + 1, p):
                idx = multiple - left
                if idx >= 0 and idx < sieve_size:
                    is_prime[idx] = False
        
        primes = []
        for i in range(sieve_size):
            if is_prime[i]:
                primes.append(left + i)
        
        if len(primes) < 2:
            return [-1, -1]
        
        min_gap = float('inf')
        result = [-1, -1]
        for i in range(1, len(primes)):
            current_gap = primes[i] - primes[i-1]
            if current_gap < min_gap:
                min_gap = current_gap
                result = [primes[i-1], primes[i]]
                if min_gap == 2:
                    break
        
        return result
